/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
;(function(){
// 编写名为jQuery的函数
function jQuery(selector){
	return new jQuery.fn.init(selector); 
}

jQuery.fn = jQuery.prototype = {
	constructor:jQuery,
	init:function(selector){
		if(typeof selector == "string"){
			var eles = document.querySelectorAll(selector);
			for(var i=0;i<eles.length;i++){
				this[i] = eles[i];
			}
			this.length = eles.length;
		}else{
			this[0] = selector;
			this.length = 1;
		}
	},
	css:function(){
		// 针对一个参数的情况
		if(arguments.length == 1){
			/*
			需要对这个参数的类型进行判断 --> 如果这个参数的类型是属于 string 类型的，那么就说明是想进行属性的获取，而且读取到的是 this 上的第一个元素中的该名称的属性值
			 */
			if(typeof arguments[0] == "string"){
				return window.getComputedStyle(this[0],null)[arguments[0]];
			}else{
				// 此时的这个 arguments[0] 是一个 json 格式的数据
				for(var i=0;i < this.length;i++){
					for(var key in arguments[0]){
						this[i].style[key] = arguments[0][key];
					}
				}
			}
		}else if(arguments.length == 2){
			// 针对两个参数的情况 --> 第一个参数是用于设置属性名的，第二个参数适用于设置属性值
			for(var i=0;i<this.length;i++){
				this[i].style[arguments[0]] = arguments[1];
			}
		}
	}
}

jQuery.extend = jQuery.fn.extend = function(){
	var target ;
	var params = {};
	if(arguments.length == 1){
		target = this;
		for(var key in arguments[0]){
			params[key] = arguments[0][key];
		}
	}else{
		// 是对于 jQuery 工具方法的拓展，此时就意味着，这个方法是要为 arguments中的第一个参数去动态拷贝属性进来
		target = arguments[0];
		/*for(var key in arguments){
			if(key != 0){
				params[key] = arguments[key];
			}
		}*/
		for(var i=1;i<arguments.length;i++){
			var json = arguments[i];
			for(var key in json){
				params[key] = json[key];
			}
		}
	}
	for(var key in params){
		target[key] = params[key];
	}
}

// 对于 each 工具方法的编写
jQuery.extend({
	each:function(obj,callback){
		if(("length" in obj) && obj.length > 0){
			// 如果这个 obj 中含有length，且这个 length长度大于0
			for(var i=0;i<obj.length;i++){
				callback.call(obj[i],i,obj[i]);
			}
		}else{
			for(var i in obj){
				callback.call(obj[i],i,obj[i]);
			}
		}
	},
	ajax:function(){},
	get:function(){},
	post:function(){}
});

// 对于元素对象上 each方法的编写
jQuery.fn.extend({
	each:function(callback){
		jQuery.each(this,callback);
	},
	show:function(){
		this.css("display","block");
	},
	hide:function(){
		this.css("display","none");
	},
	toggle:function(){

		/*
		<p>11</p> 
		--->
		init 类型的对象  {0:<p>11</p>,length:1} 因为 是 init 类型的对象了，所以也就能够随意调用jQuery.fn 中所定义的所有方法
		 */
		/*
		$("p") --> {0:1,1:p,2:p,length:3}
		$(this) --> {0:<p></p>,length:1}
		 */
		// 如果是显示的 --> 隐藏 ； 如果是隐藏的 --> 显示
		this.each(function(index,value){
			$(this).css("display") == "block" ? $(this).hide() : $(this).show();
		});
	},
	on:function(){
		if(arguments.length == 2){
			var method = arguments[0];
			var callback = arguments[1];
			this.each(function(index,ele){
				ele.addEventListener(method,callback);
			});
		}else{
			// 此时 arguments 中只含有一个参数 , 这个参数是 js 对象
			var json = arguments[0];
			for(var key in json){
				this.on(key,json[key]);
			}
		}
	},
	value:function(){},
	html:function(){}
});

jQuery.fn.init.prototype = jQuery.fn;
window.jQuery = window.$ = jQuery;
})();